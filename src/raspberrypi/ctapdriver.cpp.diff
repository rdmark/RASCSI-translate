*** C:/Users/dmark/Downloads/rascsi147/src/raspberrypi/ctapdriver.cpp	Sat Apr 11 22:51:46 2020
--- C:/Users/dmark/Downloads/rascsi152/src/raspberrypi/netdriver.cpp	Fri Mar 26 21:17:32 2021
***************
*** 1,22 ****
  //---------------------------------------------------------------------------
  //
  //	SCSI Target Emulator RaSCSI (*^..^*)
  //	for Raspberry Pi
- //
  //	Powered by XM6 TypeG Technology.
! //	Copyright (C) 2016-2020 GIMONS
  //
  //	Imported NetBSD support and some optimisation patch by Rin Okuyama.
  //
! //	[ TAPドライバ ]
  //
  //---------------------------------------------------------------------------
  
  #include "os.h"
! #include "xm6.h"
! #include "ctapdriver.h"
  
  //---------------------------------------------------------------------------
  //
  //	コンストラクタ
  //
--- 1,270 ----
  //---------------------------------------------------------------------------
  //
  //	SCSI Target Emulator RaSCSI (*^..^*)
  //	for Raspberry Pi
  //	Powered by XM6 TypeG Technology.
! //
! //	Copyright (C) 2016-2021 GIMONS(Twitter:@kugimoto0715)
  //
  //	Imported NetBSD support and some optimisation patch by Rin Okuyama.
  //
! //	[ Network driver ]
  //
  //---------------------------------------------------------------------------
  
  #include "os.h"
! #include "rascsi.h"
! #include "netdriver.h"
! 
! //===========================================================================
! //
! //	Network driver
! //
! //===========================================================================
! static NetDriver *self;
! 
! //---------------------------------------------------------------------------
! //
! //	Callback function
! //
! //---------------------------------------------------------------------------
! int NetCallback(BOOL read, int func, int phase, int len, BYTE *buf)
! {
! 	ASSERT(self);
! 
! 	return self->Process(read, func, phase, len, buf);
! }
! 
! //---------------------------------------------------------------------------
! //
! //	Constructor
! //
! //---------------------------------------------------------------------------
! NetDriver::NetDriver()
! {
! 	// Create TAP driver
! 	tap = new CTapDriver();
! 	m_bTapEnable = tap->Init();
! 
! 	// Generate MAC address
! 	memset(mac_addr, 0x00, 6);
! 	if (m_bTapEnable) {
! 		tap->GetMacAddr(mac_addr);
! 		mac_addr[5]++;
! 	}
! 
! 	// Turn on packet receive flag
! 	packet_enable = FALSE;
! 
! 	// Store self
! 	self = this;
! }
! 
! //---------------------------------------------------------------------------
! //
! //	Destructor
! //
! //---------------------------------------------------------------------------
! NetDriver::~NetDriver()
! {
! 	// Release TAP driver
! 	if (tap) {
! 		tap->Cleanup();
! 		delete tap;
! 	}
! }
! 
! //---------------------------------------------------------------------------
! //
! //	Execute
! //
! //---------------------------------------------------------------------------
! int FASTCALL NetDriver::Process(
! 	BOOL read, int func, int phase, int len, BYTE *buf)
! {
! 	int i;
! 	int total_len;
! 
! 	ASSERT(this);
! 
! 	// Don't process if TAP is disabled
! 	if (!m_bTapEnable) {
! 		return 0;
! 	}
! 
! 	if (read) {
! 		switch (func) {
! 			case 0:		// Get MAC address
! 				return GetMacAddr(buf);
! 
! 			case 1:		// Get receive packets (size / buffer separately)
! 				if (phase == 0) {
! 					// Get packet size
! 					ReceivePacket();
! 					buf[0] = (BYTE)(packet_len >> 8);
! 					buf[1] = (BYTE)packet_len;
! 					return 2;
! 				} else {
! 					// Get packet data
! 					GetPacketBuf(buf);
! 					return packet_len;
! 				}
! 
! 			case 2:		// Get receive packets (size + buffer simultaneously)
! 				ReceivePacket();
! 				buf[0] = (BYTE)(packet_len >> 8);
! 				buf[1] = (BYTE)packet_len;
! 				GetPacketBuf(&buf[2]);
! 				return packet_len + 2;
! 
! 			case 3:		// Get multiple packets simultaneously (size + buffer simultaneously)
! 				// The upper limit of packets are currently set to 10
! 				// Increasing beyond that will probably not improve performance
! 				total_len = 0;
! 				for (i = 0; i < 10; i++) {
! 					ReceivePacket();
! 					*buf++ = (BYTE)(packet_len >> 8);
! 					*buf++ = (BYTE)packet_len;
! 					total_len += 2;
! 					if (packet_len == 0)
! 						break;
! 					GetPacketBuf(buf);
! 					buf += packet_len;
! 					total_len += packet_len;
! 				}
! 				return total_len;
! 		}
! 	} else {
! 		switch (func) {
! 			case 0:		// Set MAC address
! 				SetMacAddr(buf);
! 				return len;
! 
! 			case 1:		// Send packet
! 				SendPacket(buf, len);
! 				return len;
! 		}
! 	}
! 
! 	// Error
! 	ASSERT(FALSE);
! 	return 0;
! }
! 
! //---------------------------------------------------------------------------
! //
! //	Get MAC address
! //
! //---------------------------------------------------------------------------
! int FASTCALL NetDriver::GetMacAddr(BYTE *mac)
! {
! 	ASSERT(this);
! 	ASSERT(mac);
! 
! 	memcpy(mac, mac_addr, 6);
! 	return 6;
! }
! 
! //---------------------------------------------------------------------------
! //
! //	Set MAC address
! //
! //---------------------------------------------------------------------------
! void FASTCALL NetDriver::SetMacAddr(BYTE *mac)
! {
! 	ASSERT(this);
! 	ASSERT(mac);
! 
! 	memcpy(mac_addr, mac, 6);
! }
! 
! //---------------------------------------------------------------------------
! //
! //	Receive packet
! //
! //---------------------------------------------------------------------------
! void FASTCALL NetDriver::ReceivePacket()
! {
! 	static const BYTE bcast_addr[6] = { 0xff, 0xff, 0xff, 0xff, 0xff, 0xff };
! 
! 	ASSERT(this);
! 	ASSERT(tap);
! 
! 	// Previous packet was not received
! 	if (packet_enable) {
! 		return;
! 	}
! 
! 	// Receive packet
! 	packet_len = tap->Rx(packet_buf);
! 
! 	// Inspect if it is a receive packet
! 	if (memcmp(packet_buf, mac_addr, 6) != 0) {
! 		if (memcmp(packet_buf, bcast_addr, 6) != 0) {
! 			packet_len = 0;
! 			return;
! 		}
! 	}
! 
! 	// Discard if exceeding buffer size
! 	if (packet_len > 2048) {
! 		packet_len = 0;
! 		return;
! 	}
! 
! 	// Store in receive buffer
! 	if (packet_len > 0) {
! 		packet_enable = TRUE;
! 	}
! }
! 
! //---------------------------------------------------------------------------
! //
! //	Get packet
! //
! //---------------------------------------------------------------------------
! void FASTCALL NetDriver::GetPacketBuf(BYTE *buf)
! {
! 	int len;
! 
! 	ASSERT(this);
! 	ASSERT(tap);
! 	ASSERT(buf);
! 
! 	// Size limit
! 	len = packet_len;
! 	if (len > 2048) {
! 		len = 2048;
! 	}
! 
! 	// Copy
! 	memcpy(buf, packet_buf, len);
! 
! 	// Completed receive
! 	packet_enable = FALSE;
! }
! 
! //---------------------------------------------------------------------------
! //
! //	Packet send
! //
! //---------------------------------------------------------------------------
! void FASTCALL NetDriver::SendPacket(BYTE *buf, int len)
! {
! 	ASSERT(this);
! 	ASSERT(tap);
! 	ASSERT(buf);
! 
! 	tap->Tx(buf, len);
! }
! 
! //===========================================================================
! //
! //	TAP driver
! //
! //===========================================================================
  
  //---------------------------------------------------------------------------
  //
  //	コンストラクタ
  //
