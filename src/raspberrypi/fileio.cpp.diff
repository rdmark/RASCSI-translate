*** src/raspberrypi/fileio.cpp	Sat Apr 11 23:23:36 2020
--- src/raspberrypi/fileio.cpp	Fri Mar 26 21:17:44 2021
***************
*** 1,17 ****
  //---------------------------------------------------------------------------
  //
! //	X68000 EMULATOR "XM6"
  //
- //	Copyright (C) 2001-2006 ＰＩ．(ytanaka@ipc-tokai.or.jp)
- //	Copyright (C) 2010-2020 GIMONS
  //	[ ファイルI/O(RaSCSI用サブセット) ]
  //
  //---------------------------------------------------------------------------
  
  #include "os.h"
! #include "xm6.h"
  #include "filepath.h"
  #include "fileio.h"
  
  //===========================================================================
  //
--- 1,20 ----
  //---------------------------------------------------------------------------
  //
! //	SCSI Target Emulator RaSCSI (*^..^*)
! //	for Raspberry Pi
! //	Powered by XM6 TypeG Technology.
! //
! //	Copyright (C) 2001-2006 PI.(Twitter:@xm6_original)
! //	Copyright (C) 2010-2021 GIMONS(Twitter:@kugimoto0715)
  //
  //	[ ファイルI/O(RaSCSI用サブセット) ]
  //
  //---------------------------------------------------------------------------
  
  #include "os.h"
! #include "rascsi.h"
  #include "filepath.h"
  #include "fileio.h"
  
  //===========================================================================
  //
***************
*** 27,49 ****
  //---------------------------------------------------------------------------
  Fileio::Fileio()
  {
  	// ワーク初期化
  	handle = -1;
  }
  
  //---------------------------------------------------------------------------
  //
  //	デストラクタ
  //
  //---------------------------------------------------------------------------
  Fileio::~Fileio()
  {
! 	ASSERT(handle == -1);
! 
! 	// Releaseでの安全策
! 	Close();
  }
  
  //---------------------------------------------------------------------------
  //
  //	ロード
--- 30,56 ----
  //---------------------------------------------------------------------------
  Fileio::Fileio()
  {
  	// Work init
  	handle = -1;
+ 	m_bOpen = FALSE;
+ 	m_szPath[0] = '\0';
+ 	m_position = 0;
  }
  
  //---------------------------------------------------------------------------
  //
  //	Desctructor
  //
  //---------------------------------------------------------------------------
  Fileio::~Fileio()
  {
! 	// Release
! 	if (handle != -1) {
! 		close(handle);
! 		handle = -1;
! 	}
  }
  
  //---------------------------------------------------------------------------
  //
  //	ロード
***************
*** 52,62 ****
  BOOL FASTCALL Fileio::Load(const Filepath& path, void *buffer, int size)
  {
  	ASSERT(this);
  	ASSERT(buffer);
  	ASSERT(size > 0);
! 	ASSERT(handle < 0);
  
  	// オープン
  	if (!Open(path, ReadOnly)) {
  		return FALSE;
  	}
--- 59,69 ----
  BOOL FASTCALL Fileio::Load(const Filepath& path, void *buffer, int size)
  {
  	ASSERT(this);
  	ASSERT(buffer);
  	ASSERT(size > 0);
! 	ASSERT(!m_bOpen);
  
  	// オープン
  	if (!Open(path, ReadOnly)) {
  		return FALSE;
  	}
***************
*** 81,91 ****
  BOOL FASTCALL Fileio::Save(const Filepath& path, void *buffer, int size)
  {
  	ASSERT(this);
  	ASSERT(buffer);
  	ASSERT(size > 0);
! 	ASSERT(handle < 0);
  
  	// オープン
  	if (!Open(path, WriteOnly)) {
  		return FALSE;
  	}
--- 88,98 ----
  BOOL FASTCALL Fileio::Save(const Filepath& path, void *buffer, int size)
  {
  	ASSERT(this);
  	ASSERT(buffer);
  	ASSERT(size > 0);
! 	ASSERT(!m_bOpen);
  
  	// オープン
  	if (!Open(path, WriteOnly)) {
  		return FALSE;
  	}
***************
*** 105,155 ****
  //---------------------------------------------------------------------------
  //
  //	オープン
  //
  //---------------------------------------------------------------------------
! BOOL FASTCALL Fileio::Open(LPCTSTR fname, OpenMode mode, BOOL directIO)
  {
- 	mode_t omode;
- 
  	ASSERT(this);
  	ASSERT(fname);
! 	ASSERT(handle < 0);
  
  	// ヌル文字列からの読み込みは必ず失敗させる
  	if (fname[0] == _T('\0')) {
- 		handle = -1;
  		return FALSE;
  	}
  
! 	// デフォルトモード
! 	omode = directIO ? O_DIRECT : 0;
  
  	// モード別
  	switch (mode) {
  		// 読み込みのみ
  		case ReadOnly:
! 			handle = open(fname, O_RDONLY | omode);
  			break;
  
  		// 書き込みのみ
  		case WriteOnly:
! 			handle = open(fname, O_CREAT | O_WRONLY | O_TRUNC | omode, 0666);
  			break;
  
  		// 読み書き両方
  		case ReadWrite:
  			// CD-ROMからの読み込みはRWが成功してしまう
  			if (access(fname, 0x06) != 0) {
  				return FALSE;
  			}
! 			handle = open(fname, O_RDWR | omode);
  			break;
  
  		// アペンド
  		case Append:
! 			handle = open(fname, O_CREAT | O_WRONLY | O_APPEND | omode, 0666);
  			break;
  
  		// それ以外
  		default:
  			ASSERT(FALSE);
--- 112,171 ----
  //---------------------------------------------------------------------------
  //
  //	Open
  //
  //---------------------------------------------------------------------------
! BOOL FASTCALL Fileio::Open(LPCTSTR fname, OpenMode mode)
  {
  	ASSERT(this);
  	ASSERT(fname);
! 	ASSERT(!m_bOpen);
  
  	// Fail if attempting to read from null array
  	if (fname[0] == _T('\0')) {
  		return FALSE;
  	}
  
! 	// Whether it matches with the cache file
! 	if (handle >= 0) {
! 		if (strcmp(fname, m_szPath) == 0 && mode == m_Mode) {
! 			m_bOpen = TRUE;
! 			return TRUE;
! 		}
! 	}
! 
! 	// Release cache file
! 	close(handle);
! 	handle = -1;
! 	m_bOpen = FALSE;
! 	m_szPath[0] = '\0';
! 	m_position = 0;
  
  	// モード別
  	switch (mode) {
  		// 読み込みのみ
  		case ReadOnly:
! 			handle = open(fname, O_RDONLY);
  			break;
  
  		// 書き込みのみ
  		case WriteOnly:
! 			handle = open(fname, O_CREAT | O_WRONLY | O_TRUNC, 0666);
  			break;
  
  		// 読み書き両方
  		case ReadWrite:
  			// CD-ROMからの読み込みはRWが成功してしまう
  			if (access(fname, 0x06) != 0) {
  				return FALSE;
  			}
! 			handle = open(fname, O_RDWR);
  			break;
  
  		// アペンド
  		case Append:
! 			handle = open(fname, O_CREAT | O_WRONLY | O_APPEND, 0666);
  			break;
  
  		// それ以外
  		default:
  			ASSERT(FALSE);
***************
*** 159,182 ****
  	// 結果評価
  	if (handle == -1) {
  		return FALSE;
  	}
  
! 	ASSERT(handle >= 0);
! 	return TRUE;
! }
  
! //---------------------------------------------------------------------------
! //
! //	オープン
! //
! //---------------------------------------------------------------------------
! BOOL FASTCALL Fileio::Open(LPCTSTR fname, OpenMode mode)
! {
! 	ASSERT(this);
  
! 	return Open(fname, mode, FALSE);
  }
  
  //---------------------------------------------------------------------------
  //
  //	オープン
--- 175,197 ----
  	// 結果評価
  	if (handle == -1) {
  		return FALSE;
  	}
  
! 	// Disable read ahead
! 	if(posix_fadvise(handle, 0, 0, POSIX_FADV_RANDOM) != 0) {
! 		close(handle);
! 		return FALSE;
! 	}
  
! 	// Store path and mode
! 	m_bOpen = TRUE;
! 	strcpy(m_szPath, (LPTSTR)fname);
! 	m_Mode = mode;
  
! 	ASSERT(handle >= 0);
! 	return TRUE;
  }
  
  //---------------------------------------------------------------------------
  //
  //	オープン
***************
*** 189,224 ****
  	return Open(path.GetPath(), mode);
  }
  
  //---------------------------------------------------------------------------
  //
! //	オープン
  //
  //---------------------------------------------------------------------------
! BOOL FASTCALL Fileio::OpenDIO(LPCTSTR fname, OpenMode mode)
  {
  	ASSERT(this);
  
! 	// O_DIRECT付きでオープン
! 	if (!Open(fname, mode, TRUE)) {
! 		// 通常モードリトライ(tmpfs等)
! 		return Open(fname, mode, FALSE);
  	}
  
! 	return TRUE;
! }
  
! //---------------------------------------------------------------------------
! //
! //	O
! //
! //---------------------------------------------------------------------------
! BOOL FASTCALL Fileio::OpenDIO(const Filepath& path, OpenMode mode)
! {
! 	ASSERT(this);
  
! 	return OpenDIO(path.GetPath(), mode);
  }
  
  //---------------------------------------------------------------------------
  //
  //	読み込み
--- 204,260 ----
  	return Open(path.GetPath(), mode);
  }
  
  //---------------------------------------------------------------------------
  //
! //	Read one line
  //
  //---------------------------------------------------------------------------
! BOOL FASTCALL Fileio::ReadLine(LPTSTR buffer, int size)
  {
+ 	int i;
+ 	ssize_t ret;
+ 	char c;
+ 
  	ASSERT(this);
+ 	ASSERT(buffer);
+ 	ASSERT(size > 0);
+ 	ASSERT(m_bOpen);
+ 
+ 	// Read one char at a time
+ 	i = 0;
+ 	size--;
+ 	while (i < size) {
+ 		// Read one char
+ 		ret = read(handle, &c, 1);
+ 
+ 		// Error or EOF
+ 		if (ret <= 0) {
+ 			break;
+ 		}
+ 
+ 		// Store char
+ 		buffer[i++] = c;
  
! 		// Add position
! 		m_position++;
! 
! 		// Break at newline
! 		if (c == '\n') {
! 			break;
! 		}
  	}
  
! 	// Unable to read even one char
! 	if (i == 0) {
! 		return FALSE;
! 	}
  
! 	// Terminate with NULL
! 	buffer[i] = 0x00;
  
! 	return TRUE;
  }
  
  //---------------------------------------------------------------------------
  //
  //	読み込み
***************
*** 229,246 ****
  	int count;
  
  	ASSERT(this);
  	ASSERT(buffer);
  	ASSERT(size > 0);
! 	ASSERT(handle >= 0);
  
  	// 読み込み
  	count = read(handle, buffer, size);
  	if (count != size) {
  		return FALSE;
  	}
  
  	return TRUE;
  }
  
  //---------------------------------------------------------------------------
  //
--- 265,285 ----
  	int count;
  
  	ASSERT(this);
  	ASSERT(buffer);
  	ASSERT(size > 0);
! 	ASSERT(m_bOpen);
  
  	// 読み込み
  	count = read(handle, buffer, size);
  	if (count != size) {
  		return FALSE;
  	}
  
+ 	// Update current position
+ 	m_position += (off64_t)size;
+ 
  	return TRUE;
  }
  
  //---------------------------------------------------------------------------
  //
***************
*** 252,269 ****
  	int count;
  
  	ASSERT(this);
  	ASSERT(buffer);
  	ASSERT(size > 0);
! 	ASSERT(handle >= 0);
  
  	// 書き込み
  	count = write(handle, buffer, size);
  	if (count != size) {
  		return FALSE;
  	}
  
  	return TRUE;
  }
  
  //---------------------------------------------------------------------------
  //
--- 291,311 ----
  	int count;
  
  	ASSERT(this);
  	ASSERT(buffer);
  	ASSERT(size > 0);
! 	ASSERT(m_bOpen);
  
  	// 書き込み
  	count = write(handle, buffer, size);
  	if (count != size) {
  		return FALSE;
  	}
  
+ 	// Update current position
+ 	m_position += (off64_t)size;
+ 
  	return TRUE;
  }
  
  //---------------------------------------------------------------------------
  //
***************
*** 271,316 ****
  //
  //---------------------------------------------------------------------------
  BOOL FASTCALL Fileio::Seek(off64_t offset, BOOL relative)
  {
  	ASSERT(this);
! 	ASSERT(handle >= 0);
  	ASSERT(offset >= 0);
  
  	// 相対シークならオフセットに現在値を追加
  	if (relative) {
! 		offset += GetFilePos();
  	}
  
  	if (lseek(handle, offset, SEEK_SET) != offset) {
  		return FALSE;
  	}
  
  	return TRUE;
  }
  
  //---------------------------------------------------------------------------
  //
  //	ファイルサイズ取得
  //
  //---------------------------------------------------------------------------
  off64_t FASTCALL Fileio::GetFileSize()
  {
- 	off64_t cur;
  	off64_t end;
  
  	ASSERT(this);
! 	ASSERT(handle >= 0);
! 
! 	// ファイル位置を64bitで取得
! 	cur = GetFilePos();
  
  	// ファイルサイズを64bitで取得
  	end = lseek(handle, 0, SEEK_END);
  
  	// 位置を元に戻す
! 	Seek(cur);
  
  	return end;
  }
  
  //---------------------------------------------------------------------------
--- 313,363 ----
  //
  //---------------------------------------------------------------------------
  BOOL FASTCALL Fileio::Seek(off64_t offset, BOOL relative)
  {
  	ASSERT(this);
! 	ASSERT(m_bOpen);
  	ASSERT(offset >= 0);
  
  	// 相対シークならオフセットに現在値を追加
  	if (relative) {
! 		offset += m_position;
! 	}
! 
! 	// If the offset did not change do not seek
! 	if (offset == m_position) {
! 		return TRUE;
  	}
  
+ 	// Seek
  	if (lseek(handle, offset, SEEK_SET) != offset) {
  		return FALSE;
  	}
  
+ 	// Update current position
+ 	m_position = offset;
+ 
  	return TRUE;
  }
  
  //---------------------------------------------------------------------------
  //
  //	ファイルサイズ取得
  //
  //---------------------------------------------------------------------------
  off64_t FASTCALL Fileio::GetFileSize()
  {
  	off64_t end;
  
  	ASSERT(this);
! 	ASSERT(m_bOpen);
  
  	// ファイルサイズを64bitで取得
  	end = lseek(handle, 0, SEEK_END);
  
  	// 位置を元に戻す
! 	lseek(handle, m_position, SEEK_SET);
  
  	return end;
  }
  
  //---------------------------------------------------------------------------
***************
*** 318,351 ****
  //	ファイル位置取得
  //
  //---------------------------------------------------------------------------
  off64_t FASTCALL Fileio::GetFilePos() const
  {
- 	off64_t pos;
- 
  	ASSERT(this);
! 	ASSERT(handle >= 0);
  
  	// ファイル位置を64bitで取得
! 	pos = lseek(handle, 0, SEEK_CUR);
! 	return pos;
! 
  }
  
  //---------------------------------------------------------------------------
  //
  //	クローズ
  //
  //---------------------------------------------------------------------------
  void FASTCALL Fileio::Close()
  {
  	ASSERT(this);
  
! 	if (handle != -1) {
! 		close(handle);
! 		handle = -1;
! 	}
  }
  #else
  //---------------------------------------------------------------------------
  //
  //	コンストラクタ
--- 365,397 ----
  //	ファイル位置取得
  //
  //---------------------------------------------------------------------------
  off64_t FASTCALL Fileio::GetFilePos() const
  {
  	ASSERT(this);
! 	ASSERT(m_bOpen);
  
  	// ファイル位置を64bitで取得
! 	return m_position;
  }
  
  //---------------------------------------------------------------------------
  //
  //	クローズ
  //
  //---------------------------------------------------------------------------
  void FASTCALL Fileio::Close()
  {
  	ASSERT(this);
+ 	ASSERT(m_bOpen);
  
! 	// Seek ahead
! 	lseek(handle, 0, SEEK_SET);
! 	m_position = 0;
! 
! 	// Close
! 	m_bOpen = FALSE;
  }
  #else
  //---------------------------------------------------------------------------
  //
  //	コンストラクタ
***************
*** 353,375 ****
  //---------------------------------------------------------------------------
  Fileio::Fileio()
  {
  	// ワーク初期化
  	handle.obj.fs = 0;
  }
  
  //---------------------------------------------------------------------------
  //
  //	デストラクタ
  //
  //---------------------------------------------------------------------------
  Fileio::~Fileio()
  {
! 	ASSERT(!handle.obj.fs);
! 
! 	// Releaseでの安全策
! 	Close();
  }
  
  //---------------------------------------------------------------------------
  //
  //	ロード
--- 399,424 ----
  //---------------------------------------------------------------------------
  Fileio::Fileio()
  {
  	// ワーク初期化
  	handle.obj.fs = 0;
+ 	m_bOpen = FALSE;
+ 	m_szPath[0] = '\0';
+ 	m_position = 0;
  }
  
  //---------------------------------------------------------------------------
  //
  //	デストラクタ
  //
  //---------------------------------------------------------------------------
  Fileio::~Fileio()
  {
! 	// Release
! 	if (handle.obj.fs) {
! 		f_close(&handle);
! 	}
  }
  
  //---------------------------------------------------------------------------
  //
  //	ロード
***************
*** 378,388 ****
  BOOL FASTCALL Fileio::Load(const Filepath& path, void *buffer, int size)
  {
  	ASSERT(this);
  	ASSERT(buffer);
  	ASSERT(size > 0);
! 	ASSERT(!handle.obj.fs);
  
  	// オープン
  	if (!Open(path, ReadOnly)) {
  		return FALSE;
  	}
--- 427,437 ----
  BOOL FASTCALL Fileio::Load(const Filepath& path, void *buffer, int size)
  {
  	ASSERT(this);
  	ASSERT(buffer);
  	ASSERT(size > 0);
! 	ASSERT(!m_bOpen);
  
  	// オープン
  	if (!Open(path, ReadOnly)) {
  		return FALSE;
  	}
***************
*** 407,417 ****
  BOOL FASTCALL Fileio::Save(const Filepath& path, void *buffer, int size)
  {
  	ASSERT(this);
  	ASSERT(buffer);
  	ASSERT(size > 0);
! 	ASSERT(!handle.obj.fs);
  
  	// オープン
  	if (!Open(path, WriteOnly)) {
  		return FALSE;
  	}
--- 456,466 ----
  BOOL FASTCALL Fileio::Save(const Filepath& path, void *buffer, int size)
  {
  	ASSERT(this);
  	ASSERT(buffer);
  	ASSERT(size > 0);
! 	ASSERT(!m_bOpen);
  
  	// オープン
  	if (!Open(path, WriteOnly)) {
  		return FALSE;
  	}
***************
*** 435,453 ****
  //---------------------------------------------------------------------------
  BOOL FASTCALL Fileio::Open(LPCTSTR fname, OpenMode mode)
  {
  	FRESULT fr;
  	Filepath fpath;
  	ASSERT(this);
  	ASSERT(fname);
! 	ASSERT(!handle.obj.fs);
  
  	// ヌル文字列からの読み込みは必ず失敗させる
  	if (fname[0] == _T('\0')) {
  		return FALSE;
  	}
  
  	// モード別
  	switch (mode) {
  		// 読み込みのみ
  		case ReadOnly:
  			fr = f_open(&handle, fname, FA_READ);
--- 484,518 ----
  //---------------------------------------------------------------------------
  BOOL FASTCALL Fileio::Open(LPCTSTR fname, OpenMode mode)
  {
  	FRESULT fr;
  	Filepath fpath;
+ 
  	ASSERT(this);
  	ASSERT(fname);
! 	ASSERT(!m_bOpen);
  
  	// ヌル文字列からの読み込みは必ず失敗させる
  	if (fname[0] == _T('\0')) {
  		return FALSE;
  	}
  
+ 	// Does it match the cache file?
+ 	if (handle.obj.fs) {
+ 		if (strcmp(fname, m_szPath) == 0 && mode == m_Mode) {
+ 			m_bOpen = TRUE;
+ 			return TRUE;
+ 		}
+ 	}
+ 
+ 	// Release cache file
+ 	f_close(&handle);
+ 	handle.obj.fs = 0;
+ 	m_bOpen = FALSE;
+ 	m_szPath[0] = '\0';
+ 	m_position = 0;
+ 
  	// モード別
  	switch (mode) {
  		// 読み込みのみ
  		case ReadOnly:
  			fr = f_open(&handle, fname, FA_READ);
***************
*** 478,488 ****
--- 543,569 ----
  	// 結果評価
  	if (fr != FR_OK) {
  		return FALSE;
  	}
  
+ 	// Generate link map table
+ 	handle.cltbl = cltbl;
+ 	cltbl[0] = sizeof(cltbl) / sizeof(DWORD);
+ 	fr = f_lseek(&handle, CREATE_LINKMAP);
+ 	if (fr != FR_OK) {
+ 		f_close(&handle);
+ 		handle.obj.fs = 0;
+ 		return FALSE;
+ 	}
+ 
+ 	// Store path and mode
+ 	m_bOpen = TRUE;
+ 	strcpy(m_szPath, (LPTSTR)fname);
+ 	m_Mode = mode;
+ 
  	// Open success
+ 	ASSERT(handle.obj.fs);
  	return TRUE;
  }
  
  //---------------------------------------------------------------------------
  //
***************
*** 490,506 ****
  //
  //---------------------------------------------------------------------------
  BOOL FASTCALL Fileio::Open(const Filepath& path, OpenMode mode)
  {
  	ASSERT(this);
- 	ASSERT(!handle.obj.fs);
  
  	return Open(path.GetPath(), mode);
  }
  
  //---------------------------------------------------------------------------
  //
  //	読み込み
  //
  //---------------------------------------------------------------------------
  BOOL FASTCALL Fileio::Read(void *buffer, int size)
  {
--- 571,609 ----
  //
  //---------------------------------------------------------------------------
  BOOL FASTCALL Fileio::Open(const Filepath& path, OpenMode mode)
  {
  	ASSERT(this);
  
  	return Open(path.GetPath(), mode);
  }
  
  //---------------------------------------------------------------------------
  //
+ //	Read one line
+ //
+ //---------------------------------------------------------------------------
+ BOOL FASTCALL Fileio::ReadLine(LPTSTR buffer, int size)
+ {
+ 	ASSERT(this);
+ 	ASSERT(buffer);
+ 	ASSERT(size > 0);
+ 	ASSERT(m_bOpen);
+ 
+ 	// Read
+ 	if (f_gets(buffer, size -1, &handle) == NULL) {
+ 		return FALSE;
+ 	}
+ 
+ 	// Update current position
+ 	m_position = (off64_t)f_tell(&handle);
+ 
+ 	return TRUE;
+ }
+ 
+ //---------------------------------------------------------------------------
+ //
  //	読み込み
  //
  //---------------------------------------------------------------------------
  BOOL FASTCALL Fileio::Read(void *buffer, int size)
  {
***************
*** 508,525 ****
  	UINT count;
  
  	ASSERT(this);
  	ASSERT(buffer);
  	ASSERT(size > 0);
! 	ASSERT(handle.obj.fs);
  
  	// 読み込み
  	fr = f_read(&handle, buffer, size, &count);
  	if (fr != FR_OK || count != (unsigned int)size) {
  		return FALSE;
  	}
  
  	return TRUE;
  }
  
  //---------------------------------------------------------------------------
  //
--- 611,631 ----
  	UINT count;
  
  	ASSERT(this);
  	ASSERT(buffer);
  	ASSERT(size > 0);
! 	ASSERT(m_bOpen);
  
  	// 読み込み
  	fr = f_read(&handle, buffer, size, &count);
  	if (fr != FR_OK || count != (unsigned int)size) {
  		return FALSE;
  	}
  
+ 	// Update current position
+ 	m_position += (off64_t)size;
+ 
  	return TRUE;
  }
  
  //---------------------------------------------------------------------------
  //
***************
*** 532,549 ****
  	UINT count;
  
  	ASSERT(this);
  	ASSERT(buffer);
  	ASSERT(size > 0);
! 	ASSERT(handle.obj.fs);
  
  	// 書き込み
  	fr = f_write(&handle, buffer, size, &count);
  	if (fr != FR_OK || count != (unsigned int)size) {
  		return FALSE;
  	}
  
  	return TRUE;
  }
  
  //---------------------------------------------------------------------------
  //
--- 638,658 ----
  	UINT count;
  
  	ASSERT(this);
  	ASSERT(buffer);
  	ASSERT(size > 0);
! 	ASSERT(m_bOpen);
  
  	// 書き込み
  	fr = f_write(&handle, buffer, size, &count);
  	if (fr != FR_OK || count != (unsigned int)size) {
  		return FALSE;
  	}
  
+ 	// Update current position
+ 	m_position += (off64_t)size;
+ 
  	return TRUE;
  }
  
  //---------------------------------------------------------------------------
  //
***************
*** 553,579 ****
  BOOL FASTCALL Fileio::Seek(off64_t offset, BOOL relative)
  {
  	FRESULT fr;
  
  	ASSERT(this);
  	ASSERT(offset >= 0);
- 	ASSERT(handle.obj.fs);
  
  	// 相対シークならオフセットに現在値を追加
  	if (relative) {
! 		offset += f_tell(&handle);
  	}
  
!     fr = f_lseek(&handle, offset);
! 	if (fr != FR_OK) {
! 		return FALSE;
  	}
  
! 	if (f_tell(&handle) != (DWORD)offset) {
  		return FALSE;
  	}
  
  	return TRUE;
  }
  
  //---------------------------------------------------------------------------
  //
--- 662,693 ----
  BOOL FASTCALL Fileio::Seek(off64_t offset, BOOL relative)
  {
  	FRESULT fr;
  
  	ASSERT(this);
+ 	ASSERT(m_bOpen);
  	ASSERT(offset >= 0);
  
  	// 相対シークならオフセットに現在値を追加
  	if (relative) {
! 		offset += m_position;
  	}
  
! 	// If no change to offset do not seek
! 	if (offset == m_position) {
! 		return TRUE;
  	}
  
! 	// Seek
! 	fr = f_lseek(&handle, offset);
! 	if (fr != FR_OK) {
  		return FALSE;
  	}
  
+ 	// Update current position
+ 	m_position = offset;
+ 
  	return TRUE;
  }
  
  //---------------------------------------------------------------------------
  //
***************
*** 581,591 ****
  //
  //---------------------------------------------------------------------------
  off64_t FASTCALL Fileio::GetFileSize()
  {
  	ASSERT(this);
! 	ASSERT(handle.obj.fs);
  
  	return f_size(&handle);
  }
  
  //---------------------------------------------------------------------------
--- 695,705 ----
  //
  //---------------------------------------------------------------------------
  off64_t FASTCALL Fileio::GetFileSize()
  {
  	ASSERT(this);
! 	ASSERT(m_bOpen);
  
  	return f_size(&handle);
  }
  
  //---------------------------------------------------------------------------
***************
*** 594,617 ****
  //
  //---------------------------------------------------------------------------
  off64_t FASTCALL Fileio::GetFilePos() const
  {
  	ASSERT(this);
! 	ASSERT(handle.obj.fs);
  
! 	return f_tell(&handle);
  }
  
  //---------------------------------------------------------------------------
  //
  //	クローズ
  //
  //---------------------------------------------------------------------------
  void FASTCALL Fileio::Close()
  {
  	ASSERT(this);
  
! 	if (handle.obj.fs) {
! 		f_close(&handle);
! 	}
  }
  #endif	//BAREMETAL
\ No newline at end of file
--- 708,738 ----
  //
  //---------------------------------------------------------------------------
  off64_t FASTCALL Fileio::GetFilePos() const
  {
  	ASSERT(this);
! 	ASSERT(m_bOpen);
  
! 	return m_position;
  }
  
  //---------------------------------------------------------------------------
  //
  //	クローズ
  //
  //---------------------------------------------------------------------------
  void FASTCALL Fileio::Close()
  {
  	ASSERT(this);
+ 	ASSERT(m_bOpen);
  
! 	// Seek ahead
! 	f_lseek(&handle, 0);
! 	m_position = 0;
! 
! 	// Leave cache by syncing
! 	f_sync(&handle);
! 
! 	// Close
! 	m_bOpen = FALSE;
  }
  #endif	//BAREMETAL
\ No newline at end of file