*** src/raspberrypi/gpiobus.h	Sat Apr 11 22:55:24 2020
--- src/raspberrypi/gpiobus.h	Fri Mar 26 21:19:06 2021
***************
*** 1,21 ****
  //---------------------------------------------------------------------------
  //
  //	SCSI Target Emulator RaSCSI (*^..^*)
  //	for Raspberry Pi
- //
  //	Powered by XM6 TypeG Technology.
! //	Copyright (C) 2016-2020 GIMONS
  //	[ GPIO-SCSIバス ]
  //
  //---------------------------------------------------------------------------
  
  #if !defined(gpiobus_h)
  #define gpiobus_h
  
- #include "scsi.h"
- 
  //---------------------------------------------------------------------------
  //
  //	接続方法定義の選択
  //
  //---------------------------------------------------------------------------
--- 1,20 ----
  //---------------------------------------------------------------------------
  //
  //	SCSI Target Emulator RaSCSI (*^..^*)
  //	for Raspberry Pi
  //	Powered by XM6 TypeG Technology.
! //
! //	Copyright (C) 2016-2021 GIMONS(Twitter:@kugimoto0715)
! //
  //	[ GPIO-SCSIバス ]
  //
  //---------------------------------------------------------------------------
  
  #if !defined(gpiobus_h)
  #define gpiobus_h
  
  //---------------------------------------------------------------------------
  //
  //	接続方法定義の選択
  //
  //---------------------------------------------------------------------------
***************
*** 24,33 ****
--- 23,42 ----
  //#define CONNECT_TYPE_AIBOM		// AIBOM版(正論理,固有ピンアサイン)
  //#define CONNECT_TYPE_GAMERNIUM	// GAMERnium.com版(標準論理,固有ピンアサイン)
  
  //---------------------------------------------------------------------------
  //
+ //	Default connection type is FULLSPEC
+ //
+ //---------------------------------------------------------------------------
+ #if !defined(CONNECT_TYPE_STANDARD) && !defined(CONNECT_TYPE_FULLSPEC) && \
+ 	!defined(CONNECT_TYPE_AIBOM) && !defined(CONNECT_TYPE_GAMERNIUM)
+ #define CONNECT_TYPE_FULLSPEC
+ #endif
+ 
+ //---------------------------------------------------------------------------
+ //
  //	信号制御論理及びピンアサインカスタマイズ
  //
  //---------------------------------------------------------------------------
  
  //---------------------------------------------------------------------------
***************
*** 138,148 ****
  #define	PIN_MSG		23						// MSG
  #define	PIN_CD		24						// CD
  #define	PIN_IO		25						// IO
  #define	PIN_BSY		26						// BSY
  #define	PIN_SEL		27						// SEL
! #endif
  
  #ifdef CONNECT_TYPE_FULLSPEC
  //
  // RaSCSI 標準(SCSI論理,標準ピンアサイン)
  //
--- 147,157 ----
  #define	PIN_MSG		23						// MSG
  #define	PIN_CD		24						// CD
  #define	PIN_IO		25						// IO
  #define	PIN_BSY		26						// BSY
  #define	PIN_SEL		27						// SEL
! #endif	// CONNECT_TYPE_STANDARD
  
  #ifdef CONNECT_TYPE_FULLSPEC
  //
  // RaSCSI 標準(SCSI論理,標準ピンアサイン)
  //
***************
*** 182,192 ****
  #define	PIN_MSG		23						// MSG
  #define	PIN_CD		24						// CD
  #define	PIN_IO		25						// IO
  #define	PIN_BSY		26						// BSY
  #define	PIN_SEL		27						// SEL
! #endif
  
  #ifdef CONNECT_TYPE_AIBOM
  //
  // RaSCSI Adapter あいぼむ版
  //
--- 191,201 ----
  #define	PIN_MSG		23						// MSG
  #define	PIN_CD		24						// CD
  #define	PIN_IO		25						// IO
  #define	PIN_BSY		26						// BSY
  #define	PIN_SEL		27						// SEL
! #endif	// CONNECT_TYPE_FULLSPEC
  
  #ifdef CONNECT_TYPE_AIBOM
  //
  // RaSCSI Adapter あいぼむ版
  //
***************
*** 227,237 ****
  #define	PIN_MSG		9						// MSG
  #define	PIN_CD		11						// CD
  #define	PIN_IO		23						// IO
  #define	PIN_BSY		24						// BSY
  #define	PIN_SEL		8						// SEL
! #endif
  
  #ifdef CONNECT_TYPE_GAMERNIUM
  //
  // RaSCSI Adapter GAMERnium.com版
  //
--- 236,246 ----
  #define	PIN_MSG		9						// MSG
  #define	PIN_CD		11						// CD
  #define	PIN_IO		23						// IO
  #define	PIN_BSY		24						// BSY
  #define	PIN_SEL		8						// SEL
! #endif	// CONNECT_TYPE_AIBOM
  
  #ifdef CONNECT_TYPE_GAMERNIUM
  //
  // RaSCSI Adapter GAMERnium.com版
  //
***************
*** 272,282 ****
  #define	PIN_MSG		17						// MSG
  #define	PIN_CD		18						// CD
  #define	PIN_IO		4						// IO
  #define	PIN_BSY		27						// BSY
  #define	PIN_SEL		23						// SEL
! #endif
  
  //---------------------------------------------------------------------------
  //
  //	定数宣言(GPIO)
  //
--- 281,298 ----
  #define	PIN_MSG		17						// MSG
  #define	PIN_CD		18						// CD
  #define	PIN_IO		4						// IO
  #define	PIN_BSY		27						// BSY
  #define	PIN_SEL		23						// SEL
! #endif	// CONNECT_TYPE_GAMERNIUM
! 
! //---------------------------------------------------------------------------
! //
! //	Constant definition (Real-time class scheduler)
! //
! //---------------------------------------------------------------------------
! #define PATH_RTTIME	"/proc/sys/kernel/sched_rt_runtime_us"
  
  //---------------------------------------------------------------------------
  //
  //	定数宣言(GPIO)
  //
***************
*** 287,313 ****
--- 303,347 ----
  #define PADS_OFFSET		0x00100000
  #define GPIO_OFFSET		0x00200000
  #define QA7_OFFSET		0x01000000
  #define GPIO_INPUT		0
  #define GPIO_OUTPUT		1
+ #define GPIO_ALT5		2
+ #define GPIO_ALT4		3
+ #define GPIO_ALT0		4
+ #define GPIO_ALT1		5
+ #define GPIO_ALT2		6
+ #define GPIO_ALT3		7
  #define GPIO_PULLNONE	0
  #define GPIO_PULLDOWN	1
  #define GPIO_PULLUP		2
  #define GPIO_FSEL_0		0
  #define GPIO_FSEL_1		1
  #define GPIO_FSEL_2		2
  #define GPIO_FSEL_3		3
+ #define GPIO_FSEL_4		4
+ #define GPIO_FSEL_5		5
  #define GPIO_SET_0		7
+ #define GPIO_SET_1		8
  #define GPIO_CLR_0		10
+ #define GPIO_CLR_1		11
  #define GPIO_LEV_0		13
+ #define GPIO_LEV_1		14
  #define GPIO_EDS_0		16
+ #define GPIO_EDS_1		17
  #define GPIO_REN_0		19
+ #define GPIO_REN_1		20
  #define GPIO_FEN_0		22
+ #define GPIO_FEN_1		23
  #define GPIO_HEN_0		25
+ #define GPIO_HEN_1		26
  #define GPIO_LEN_0		28
+ #define GPIO_LEN_1		29
  #define GPIO_AREN_0		31
+ #define GPIO_AREN_1		32
  #define GPIO_AFEN_0		34
+ #define GPIO_AFEN_1		35
  #define GPIO_PUD		37
  #define GPIO_CLK_0		38
  #define GPIO_GPPINMUXSD	52
  #define GPIO_PUPPDN0	57
  #define GPIO_PUPPDN1	58
***************
*** 353,362 ****
--- 387,440 ----
  					 (1 << PIN_CD) | \
  					 (1 << PIN_IO))
  
  //---------------------------------------------------------------------------
  //
+ //	Constant definitions (Clock Manager)
+ //
+ //---------------------------------------------------------------------------
+ #define CM_OFFSET			0x00101000
+ #define CM_GP0CTL			28
+ #define CM_GP0DIV			29
+ #define CM_GP1CTL			30
+ #define CM_GP1DIV			31
+ #define CM_GP2CTL			32
+ #define CM_GP2DIV			33
+ #define CM_PASSWORD 		0x5A000000
+ #define CM_SRC_OSCILLATOR	0x01
+ #define CM_SRC_TESTDEBUG0	0x02
+ #define CM_SRC_TESTDEBUG1	0x03
+ #define CM_SRC_PLLAPER		0x04
+ #define CM_SRC_PLLCPER		0x05
+ #define CM_SRC_PLLDPER		0x06
+ #define CM_SRC_HDMIAUX		0x07
+ #define CM_SRC_GND			0x08
+ #define CM_ENAB 			0x10
+ #define CM_KILL 			0x20
+ #define CM_BUSY 			0x80
+ #define CM_FLIP 			0x100
+ #define CM_MASH_1			0x200
+ #define CM_MASH_2			0x400
+ #define CM_MASH_3			0x600
+ #define CM_DIVI(n)			(n << 12)
+ #define CM_DIVF(n)			(n << 0)
+ 
+ //---------------------------------------------------------------------------
+ //
+ //	Constant definitions (for GPCLK)
+ //
+ //---------------------------------------------------------------------------
+ // Used for synchronous transfer
+ // However, used only in Baremetal
+ // If used by Linux it takes over GPIO and hangs the system
+ // Tested with Baremetal:3B,3B+,ZeroW
+ #define	PIN_GPCLK	32						// GPCLK0
+ #define CM_GPCTL	CM_GP0CTL
+ #define CM_GPDIV	CM_GP0DIV
+ 
+ //---------------------------------------------------------------------------
+ //
  //	定数宣言(GIC)
  //
  //---------------------------------------------------------------------------
  #define ARM_GICD_BASE		0xFF841000
  #define ARM_GICC_BASE		0xFF842000
***************
*** 386,527 ****
  #define GIC_IRQLOCAL0		(16 + 14)
  #define GIC_GPIO_IRQ		(32 + 116)	// GPIO3
  
  //---------------------------------------------------------------------------
  //
  //	定数宣言(制御信号)
  //
  //---------------------------------------------------------------------------
! #define ACT_OFF	!ACT_ON
! #define ENB_OFF	!ENB_ON
! #define TAD_OUT	!TAD_IN
! #define IND_OUT	!IND_IN
! #define DTD_OUT	!DTD_IN
  
  //---------------------------------------------------------------------------
  //
  //	定数宣言(SCSI)
  //
  //---------------------------------------------------------------------------
! #define IN		GPIO_INPUT
! #define OUT		GPIO_OUTPUT
! #define ON		TRUE
! #define OFF		FALSE
  
  //---------------------------------------------------------------------------
  //
  //	定数宣言(バス制御タイミング)
  //
  //---------------------------------------------------------------------------
! #define GPIO_DATA_SETTLING 100			// Time for data bus to settle down (ns)
  
  //---------------------------------------------------------------------------
  //
  //	クラス定義
  //
  //---------------------------------------------------------------------------
  class GPIOBUS : public BUS
  {
  public:
  	// 基本ファンクション
  	GPIOBUS();
  										// コンストラクタ
  	virtual ~GPIOBUS();
  										// デストラクタ
! 	BOOL FASTCALL Init(mode_e mode = TARGET);
  										// 初期化
  	void FASTCALL Reset();
  										// リセット
  	void FASTCALL Cleanup();
  										// クリーンアップ
  
! 	DWORD FASTCALL Aquire();
  										// 信号取り込み
  
  	void FASTCALL SetENB(BOOL ast);
  										// ENBシグナル設定
  
! 	BOOL FASTCALL GetBSY();
  										// BSYシグナル取得
  	void FASTCALL SetBSY(BOOL ast);
  										// BSYシグナル設定
  
! 	BOOL FASTCALL GetSEL();
  										// SELシグナル取得
  	void FASTCALL SetSEL(BOOL ast);
  										// SELシグナル設定
  
! 	BOOL FASTCALL GetATN();
  										// ATNシグナル取得
  	void FASTCALL SetATN(BOOL ast);
  										// ATNシグナル設定
  
! 	BOOL FASTCALL GetACK();
  										// ACKシグナル取得
  	void FASTCALL SetACK(BOOL ast);
  										// ACKシグナル設定
  
! 	BOOL FASTCALL GetRST();
  										// RSTシグナル取得
  	void FASTCALL SetRST(BOOL ast);
  										// RSTシグナル設定
  
! 	BOOL FASTCALL GetMSG();
  										// MSGシグナル取得
  	void FASTCALL SetMSG(BOOL ast);
  										// MSGシグナル設定
  
! 	BOOL FASTCALL GetCD();
  										// CDシグナル取得
  	void FASTCALL SetCD(BOOL ast);
  										// CDシグナル設定
  
! 	BOOL FASTCALL GetIO();
  										// IOシグナル取得
  	void FASTCALL SetIO(BOOL ast);
  										// IOシグナル設定
  
! 	BOOL FASTCALL GetREQ();
  										// REQシグナル取得
  	void FASTCALL SetREQ(BOOL ast);
  										// REQシグナル設定
  
! 	BYTE FASTCALL GetDAT();
  										// データシグナル取得
  	void FASTCALL SetDAT(BYTE dat);
  										// データシグナル設定
! 	BOOL FASTCALL GetDP();
  										// パリティシグナル取得
  	int FASTCALL CommandHandShake(BYTE *buf);
! 										// Command receive handshake
! 	int FASTCALL ReceiveHandShake(BYTE *buf, int count);
! 										// Data receive handshake
! 	int FASTCALL SendHandShake(BYTE *buf, int count);
! 										// Data send handshake
  
- #ifdef USE_SEL_EVENT_ENABLE
  	// SEL信号割り込み関係
  	int FASTCALL PollSelectEvent();
  										// SEL信号イベントポーリング
  	void FASTCALL ClearSelectEvent();
  										// SEL信号イベントクリア
- #endif	// USE_SEL_EVENT_ENABLE
  
  private:
  	// SCSI入出力信号制御
  	void FASTCALL MakeTable();
  										// ワークテーブル作成
  	void FASTCALL SetControl(int pin, BOOL ast);
  										// 制御信号設定
  	void FASTCALL SetMode(int pin, int mode);
  										// SCSI入出力モード設定
! 	BOOL FASTCALL GetSignal(int pin);
  										// SCSI入力信号値取得
  	void FASTCALL SetSignal(int pin, BOOL ast);
  										// SCSI出力信号値設定
  	BOOL FASTCALL WaitSignal(int pin, BOOL ast);
  										// 信号変化待ち
  	// 割り込み制御
  	void FASTCALL DisableIRQ();
  										// IRQ禁止
  	void FASTCALL EnableIRQ();
  										// IRQ有効
--- 464,674 ----
  #define GIC_IRQLOCAL0		(16 + 14)
  #define GIC_GPIO_IRQ		(32 + 116)	// GPIO3
  
  //---------------------------------------------------------------------------
  //
+ //	Constant definition (signal bit)
+ //
+ //---------------------------------------------------------------------------
+ #define SIGBIT(n)			(1 << (n % 32))
+ 
+ //---------------------------------------------------------------------------
+ //
  //	定数宣言(制御信号)
  //
  //---------------------------------------------------------------------------
! #define ACT_OFF				!ACT_ON
! #define ENB_OFF				!ENB_ON
! #define TAD_OUT				!TAD_IN
! #define IND_OUT				!IND_IN
! #define DTD_OUT				!DTD_IN
  
  //---------------------------------------------------------------------------
  //
  //	定数宣言(SCSI)
  //
  //---------------------------------------------------------------------------
! #define IN					GPIO_INPUT
! #define OUT					GPIO_OUTPUT
! #define ON					TRUE
! #define OFF					FALSE
  
  //---------------------------------------------------------------------------
  //
  //	定数宣言(バス制御タイミング)
  //
  //---------------------------------------------------------------------------
! #define GPIO_DATA_SETTLING	50			// Time for data bus to settle down (ns)
! #define GPIO_TIMEOUT_MAX	3000 * 1000	// Signal check timeout (3sec equivalent)
! #define GPIO_WATCHDOG_MAX	(1 << 25)	// Max counter for signal check (2sec equivalent)
! 
! //---------------------------------------------------------------------------
! //
! //	Macro definition
! //
! //---------------------------------------------------------------------------
! #define MemoryBarrier()		asm volatile ( \
! 			"mcr p15, 0, %[t], c7, c10, 5\n" :: [t] "r" (0) : "memory");
  
  //---------------------------------------------------------------------------
  //
  //	クラス定義
  //
  //---------------------------------------------------------------------------
  class GPIOBUS : public BUS
  {
  public:
+ 	// Operation mode definition
+ 	enum mode_e {
+ 		TARGET = 0,
+ 		INITIATOR = 1,
+ 		MONITOR = 2,
+ 	};
+ 
+ 	// Data signal direction definition
+ 	enum datadir_e {
+ 		DATA_DIR_IN,
+ 		DATA_DIR_OUT
+ 	};
+ 
  	// 基本ファンクション
  	GPIOBUS();
  										// コンストラクタ
  	virtual ~GPIOBUS();
  										// デストラクタ
! 	BOOL FASTCALL Init();
  										// 初期化
+ 	void FASTCALL SetMode(mode_e mode);
+ 										// Operation mode setup
  	void FASTCALL Reset();
  										// リセット
  	void FASTCALL Cleanup();
  										// クリーンアップ
  
! 	void FASTCALL SetDataDirection(datadir_e dir);
! 										// Change data signal direction
! 
! 	DWORD FASTCALL Aquire() const;
  										// 信号取り込み
  
  	void FASTCALL SetENB(BOOL ast);
  										// ENBシグナル設定
  
! 	BOOL FASTCALL GetBSY() const;
  										// BSYシグナル取得
  	void FASTCALL SetBSY(BOOL ast);
  										// BSYシグナル設定
  
! 	BOOL FASTCALL GetSEL() const;
  										// SELシグナル取得
  	void FASTCALL SetSEL(BOOL ast);
  										// SELシグナル設定
  
! 	BOOL FASTCALL GetATN() const;
  										// ATNシグナル取得
  	void FASTCALL SetATN(BOOL ast);
  										// ATNシグナル設定
  
! 	BOOL FASTCALL GetACK() const;
  										// ACKシグナル取得
  	void FASTCALL SetACK(BOOL ast);
  										// ACKシグナル設定
  
! 	BOOL FASTCALL GetRST() const;
  										// RSTシグナル取得
  	void FASTCALL SetRST(BOOL ast);
  										// RSTシグナル設定
  
! 	BOOL FASTCALL GetMSG() const;
  										// MSGシグナル取得
  	void FASTCALL SetMSG(BOOL ast);
  										// MSGシグナル設定
  
! 	BOOL FASTCALL GetCD() const;
  										// CDシグナル取得
  	void FASTCALL SetCD(BOOL ast);
  										// CDシグナル設定
  
! 	BOOL FASTCALL GetIO() const;
  										// IOシグナル取得
  	void FASTCALL SetIO(BOOL ast);
  										// IOシグナル設定
  
! 	BOOL FASTCALL GetREQ() const;
  										// REQシグナル取得
  	void FASTCALL SetREQ(BOOL ast);
  										// REQシグナル設定
  
! 	BYTE FASTCALL GetDAT() const;
  										// データシグナル取得
  	void FASTCALL SetDAT(BYTE dat);
  										// データシグナル設定
! 	BOOL FASTCALL GetDP() const;
  										// パリティシグナル取得
+ 
  	int FASTCALL CommandHandShake(BYTE *buf);
! 										// Batch command handshake
! 	int FASTCALL SendHandShake(
! 		BYTE *buf, int count, int syncoffset = 0);
! 										// Batch data send handshake
! 	int FASTCALL ReceiveHandShake(
! 		BYTE *buf, int count, int syncoffset = 0);
! 										// Batch data receive handshake
  
  	// SEL信号割り込み関係
  	int FASTCALL PollSelectEvent();
  										// SEL信号イベントポーリング
  	void FASTCALL ClearSelectEvent();
  										// SEL信号イベントクリア
  
  private:
  	// SCSI入出力信号制御
  	void FASTCALL MakeTable();
  										// ワークテーブル作成
  	void FASTCALL SetControl(int pin, BOOL ast);
  										// 制御信号設定
  	void FASTCALL SetMode(int pin, int mode);
  										// SCSI入出力モード設定
! 	BOOL FASTCALL GetSignal(int pin) const;
  										// SCSI入力信号値取得
  	void FASTCALL SetSignal(int pin, BOOL ast);
  										// SCSI出力信号値設定
  	BOOL FASTCALL WaitSignal(int pin, BOOL ast);
  										// 信号変化待ち
+ 
+ 	// Data transfer
+ #if	USE_SYNC_TRANS == 1
+ 	void FASTCALL SetupClockEvent();
+ 										// Clock event init
+ 	void FASTCALL ReleaseClockEvent();
+ 										// Clock event release
+ 	BOOL FASTCALL IsClockEvent();
+ 										// Clock event check
+ 	void FASTCALL ClearClockEvent();
+ 										// Clear clock event
+ 	void FASTCALL OutputReqPulse();
+ 										// Output REQ pulse
+ 	int FASTCALL SendSyncTransfer(
+ 		BYTE *buf, int count, int syncoffset);
+ 										// Synchronized data transfer (send)
+ 	int FASTCALL ReceiveSyncTransfer(
+ 		BYTE *buf, int count, int syncoffset);
+ 										// Synchronized data transfer (receive)
+ 	void FASTCALL SetupAckEvent(BOOL rise = TRUE);
+ 										// ACK event setup
+ 	void FASTCALL ReleaseAckEvent(BOOL rise = TRUE);
+ 										// ACK event release
+ 	BOOL FASTCALL IsAckEvent();
+ 										// ACK event check
+ 	void FASTCALL ClearAckEvent();
+ 										// Clear ACK event
+ 	BOOL FASTCALL WaitAckEvent();
+ 										// Wait for ACK event
+ #endif	// USE_SYNC_TRANS == 1
+ 	void FASTCALL DelayBits();
+ 										// Micro time delay
+ 
  	// 割り込み制御
  	void FASTCALL DisableIRQ();
  										// IRQ禁止
  	void FASTCALL EnableIRQ();
  										// IRQ有効
***************
*** 534,544 ****
  	void FASTCALL PinSetSignal(int pin, BOOL ast);
  										// GPIOピン出力信号設定
  	void FASTCALL DrvConfig(DWORD drive);
  										// GPIOドライブ能力設定
  
- 
  	mode_e actmode;						// 動作モード
  
  	DWORD baseaddr;						// ベースアドレス
  
  	int rpitype;
--- 681,690 ----
***************
*** 546,555 ****
--- 692,703 ----
  
  	volatile DWORD *gpio;				// GPIOレジスタ
  
  	volatile DWORD *pads;				// PADSレジスタ
  
+ 	volatile DWORD *cm;					// Clock manager register
+ 
  	volatile DWORD *level;				// GPIO入力レベル
  
  	volatile DWORD *irpctl;				// 割り込み制御レジスタ
  
  #ifndef BAREMETAL
***************
*** 560,584 ****
  	volatile int tintcore;				// 割り込み制御対象CPU
  
  	volatile DWORD tintctl;				// 割り込みコントロール
  
  	volatile DWORD giccpmr;				// GICC 優先度設定
- #endif	// BAREMETAL
  
  	volatile DWORD *gicd;				// GIC 割り込み分配器レジスタ
  
  	volatile DWORD *gicc;				// GIC CPUインターフェースレジスタ
  
! 	DWORD gpfsel[4];					// GPFSEL0-4バックアップ
  
! 	DWORD signals;						// バス全信号
  
! #if defined(USE_SEL_EVENT_ENABLE) && !defined(BAREMETAL)
  	struct gpioevent_request selevreq;	// SEL信号イベント要求
  
  	int epfd;							// epollファイルディスクプリタ
! #endif	// USE_SEL_EVENT_ENABLE && !BAREMETAL
  
  #if SIGNAL_CONTROL_MODE == 0
  	DWORD tblDatMsk[3][256];			// データマスク用テーブル
  
  	DWORD tblDatSet[3][256];			// データ設定用テーブル
--- 708,736 ----
  	volatile int tintcore;				// 割り込み制御対象CPU
  
  	volatile DWORD tintctl;				// 割り込みコントロール
  
  	volatile DWORD giccpmr;				// GICC 優先度設定
  
+ #endif	// !BAREMETAL
  	volatile DWORD *gicd;				// GIC 割り込み分配器レジスタ
  
  	volatile DWORD *gicc;				// GIC CPUインターフェースレジスタ
  
! 	DWORD gpfsel[6];					// GPFSEL0-5バックアップ
  
! 	mutable DWORD signals;				// バス全信号
  
! #ifndef BAREMETAL
  	struct gpioevent_request selevreq;	// SEL信号イベント要求
  
+ 	struct gpioevent_request rstevreq;	// RST signal event request
+ 
  	int epfd;							// epollファイルディスクプリタ
! 
! 	char rttime[20];					// sched_rt_runtime_us初期値
! #endif	// !BAREMETAL
  
  #if SIGNAL_CONTROL_MODE == 0
  	DWORD tblDatMsk[3][256];			// データマスク用テーブル
  
  	DWORD tblDatSet[3][256];			// データ設定用テーブル
***************
*** 599,608 ****
--- 751,762 ----
  class SysTimer
  {
  public:
  	static void FASTCALL Init(DWORD *syst, DWORD *armt);
  										// 初期化
+ 	static UL64 FASTCALL GetTimer();
+ 										// Get system timer
  	static DWORD FASTCALL GetTimerLow();
  										// システムタイマ(LO)取得
  	static DWORD FASTCALL GetTimerHigh();
  										// システムタイマ(HI)取得
  	static void FASTCALL SleepNsec(DWORD nsec);