*** C:/Users/dmark/Downloads/rascsi147/src/raspberrypi/cfilesystem.h	Sat Apr 11 22:53:36 2020
--- C:/Users/dmark/Downloads/rascsi152/src/raspberrypi/fsdriver.h	Fri Mar 26 21:18:34 2021
***************
*** 1,24 ****
  //---------------------------------------------------------------------------
  //
  //	SCSI Target Emulator RaSCSI (*^..^*)
  //	for Raspberry Pi
- //
  //	Powered by XM6 TypeG Technology.
! //	Copyright (C) 2016-2020 GIMONS
! //	[ ホストファイルシステム ]
  //
  //---------------------------------------------------------------------------
  
! #ifndef cfilesystem_h
! #define cfilesystem_h
  
  #ifdef BAREMETAL
  #include "ffconf.h"
  #include "ff.h"
  #endif	// BAREMETAL
  
  //---------------------------------------------------------------------------
  //
  //	ステータスコード定義
  //
  //---------------------------------------------------------------------------
--- 1,123 ----
  //---------------------------------------------------------------------------
  //
  //	SCSI Target Emulator RaSCSI (*^..^*)
  //	for Raspberry Pi
  //	Powered by XM6 TypeG Technology.
! //
! //	Copyright (C) 2016-2021 GIMONS(Twitter:@kugimoto0715)
! //
! //	[ File system driver ]
  //
  //---------------------------------------------------------------------------
  
! #ifndef fsdriver_h
! #define fsdriver_h
  
  #ifdef BAREMETAL
  #include "ffconf.h"
  #include "ff.h"
  #endif	// BAREMETAL
  
+ class CFileSys;
+ class FsDriver
+ {
+ public:
+ 	// Base functions
+ 	FsDriver();
+ 										// Constructor
+ 	virtual ~FsDriver();
+ 										// Destructor
+ 
+ 	int FASTCALL Process(BOOL read, int func, int phase, int len, BYTE *buf);
+ 										// Execute
+ 
+ private:
+ 	int FASTCALL ReadFsResult(BYTE *buf);
+ 										// File system read (result code)
+ 	int FASTCALL ReadFsOut(BYTE *buf);
+ 										// File system read (return data)
+ 	int FASTCALL ReadFsOpt(BYTE *buf);
+ 										// File system read (option data)
+ 	void FASTCALL WriteFs(int func, BYTE *buf);
+ 										// File system write (execute)
+ 	void FASTCALL WriteFsOpt(BYTE *buf, int len);
+ 										// File system write (option data)
+ 
+ 	// Command handler
+ 	void FASTCALL InitDevice(BYTE *buf);
+ 										// $40 - Boot device
+ 	void FASTCALL CheckDir(BYTE *buf);
+ 										// $41 - Directory check
+ 	void FASTCALL MakeDir(BYTE *buf);
+ 										// $42 - Create directory
+ 	void FASTCALL RemoveDir(BYTE *buf);
+ 										// $43 - Delete directory
+ 	void FASTCALL Rename(BYTE *buf);
+ 										// $44 - Change file name
+ 	void FASTCALL Delete(BYTE *buf);
+ 										// $45 - Delete file
+ 	void FASTCALL Attribute(BYTE *buf);
+ 										// $46 - Get / set file attribute
+ 	void FASTCALL Files(BYTE *buf);
+ 										// $47 - Search files
+ 	void FASTCALL NFiles(BYTE *buf);
+ 										// $48 - Search next file
+ 	void FASTCALL Create(BYTE *buf);
+ 										// $49 - Create file
+ 	void FASTCALL Open(BYTE *buf);
+ 										// $4A - Open file
+ 	void FASTCALL Close(BYTE *buf);
+ 										// $4B - Close file
+ 	void FASTCALL Read(BYTE *buf);
+ 										// $4C - Read file
+ 	void FASTCALL Write(BYTE *buf);
+ 										// $4D - Write file
+ 	void FASTCALL Seek(BYTE *buf);
+ 										// $4E - Seek file
+ 	void FASTCALL TimeStamp(BYTE *buf);
+ 										// $4F - Get / set file timestamp
+ 	void FASTCALL GetCapacity(BYTE *buf);
+ 										// $50 - Get capacity
+ 	void FASTCALL CtrlDrive(BYTE *buf);
+ 										// $51 - Inspect / control drive state
+ 	void FASTCALL GetDPB(BYTE *buf);
+ 										// $52 - Get DPB
+ 	void FASTCALL DiskRead(BYTE *buf);
+ 										// $53 - Read sector
+ 	void FASTCALL DiskWrite(BYTE *buf);
+ 										// $54 - Write sector
+ 	void FASTCALL Ioctrl(BYTE *buf);
+ 										// $55 - IOCTRL
+ 	void FASTCALL Flush(BYTE *buf);
+ 										// $56 - Flush
+ 	void FASTCALL CheckMedia(BYTE *buf);
+ 										// $57 - Media change check
+ 	void FASTCALL Lock(BYTE *buf);
+ 										// $58 - Mutual exclusion
+ 
+ 	CFileSys *fs;
+ 										// Accessory
+ 	DWORD result;
+ 										// Access result code
+ 	BYTE outbuf[0x800];
+ 										// Access result buffer
+ 	DWORD outlen;
+ 										// Access result buffer size
+ 	BYTE optbuf[0x1000000];
+ 										// Access buffer
+ 	DWORD optlen;
+ 										// Access buffer size
+ };
+ 
+ //---------------------------------------------------------------------------
+ //
+ //	Constant definition
+ //
+ //---------------------------------------------------------------------------
+ #define FILEPATH_MAX		_MAX_PATH
+ 
  //---------------------------------------------------------------------------
  //
  //	ステータスコード定義
  //
  //---------------------------------------------------------------------------
***************
*** 1177,1182 ****
  	TCHAR m_szBase[DriveMax][FILEPATH_MAX];
  										///< ベースパス状態復元用の候補
  	static DWORD g_nOption;				///< ファイル名変換フラグ
  };
  
! #endif	// cfilesystem_h
--- 1276,1281 ----
  	TCHAR m_szBase[DriveMax][FILEPATH_MAX];
  										///< ベースパス状態復元用の候補
  	static DWORD g_nOption;				///< ファイル名変換フラグ
  };
  
! #endif	// fsdriver_h
